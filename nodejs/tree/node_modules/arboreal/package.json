{
  "name": "arboreal",
  "description": "Javascript tree traversal and manipulation library",
  "author": {
    "name": "Andrea Fiore"
  },
  "version": "0.0.2",
  "contributors": [
    {
      "name": "Nenad V. NikoliÄ‡",
      "email": "me@shonzilla.com",
      "url": "http://shonzilla.com/"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "jasmine-node": "^1.14.5",
    "smoosh": "^0.4.1"
  },
  "main": "./lib/arboreal",
  "scripts": {
    "test": "jasmine-node test/specs"
  },
  "engines": {
    "node": ">= 0.4.1"
  },
  "readme": "# Arboreal.js\n\nA micro-library for traversing and manipulating tree-like data\nstructures in JavaScript; works with both node.js and the browser.\n\n<img src=\"http://travis-ci.org/afiore/arboreal.png\" />\n\n## Installation\n\nIn node.js:\n\n    git clone git://github.com/afiore/arboreal\n    npm install\n\nTo use it in the browser, just load `lib/arboreal.js` in\na script tag.\n\n## Usage\n\nArboreal provides a set of methods for parsing, manipulating, and\ntraversing tree like data structures. A tree can be created from scratch and then extended with child elements.\n\n    var tree = new Arboreal()\n\n    tree\n      .appendChild()\n      .appendChild()\n      .children[0]\n         .appendChild()\n         .appendChild();\n\nFor each child node, Arboreal will automatically assign an id string representing the depth and the index\nthe position of the node within the tree structure.\n\n    tree.children[0].children[1].id\n\n    // => 0/0/1\n\nAlternatively, Arboreal can also parse an existing object into a tree (though it will need to \nknow the name of the 'children' attribute).\n\n    var wikipediaJsCategory = {\n      category: 'JavaScript',\n      subcategories: [\n        {category: 'Ajax (programming)'},\n        {category: 'JavaScript engines'},\n        {category: 'JavaScript programming languages family',\n         subcategories: [{\n           category: 'JavaScript dialect engines'\n         }]\n        },\n        {category: 'JavaScript based calendar components'},\n        {category: 'JavaScript based HTML editors'}\n      ]\n    };\n\n    var tree = Arborel.parse(wikipediaJsCategory, 'subcategories');\n    \nAlso several children (or even the whole tree) can be added at the same time (syntax is similar as parse)\n\n    var tree = new Arboreal();\n    tree.children[1].appendChildren({category:'C#', subitems:[{category:'WPF'}]}, \"subitems\" );\n\n### Traversal\n\nAn Arboreal object can be traversed either upwards or downwards.\n\n    function iterator (node) {\n      var depth = \"\", i;\n      for (i = 1; i <= node.depth; i++) depth += \">>\";\n      console.info([depth, node.data.category].join(\" \"));\n    }\n\n    tree.traverseDown(iterator);\n\n    // =>   JavaScript\n    //      >> Ajax (programming)\n    //      >> JavaScript engines\n    //      >> JavaScript produgramming languages family\n    //      >>>> JavaScript dialect engines\n    //      >> JavaScript based calendar components\n    //      >> JavaScript based HTML editors\n\n\n    tree.children[2].traverseUp(iterator);\n\n    //  => >> JavaScript produgramming languages family\n    //     >>>> JavaScript dialect engines\n    //      JavaScript\n    //     >> Ajax (programming)\n    //     >> JavaScript engines\n    //     >> JavaScript based calendar components\n    //     >> JavaScript based HTML editors\n\n\nNote that in both the `traverseDown` and the `traverseUp` methods, the\nvalue of `this` in the iterator is bound to the value of the\ncurrently traversed `node`. Our iterator function can in fact be\nrewritten as:\n\n    function iterator () {\n      var depth = \"\", i;\n      for (i = 1; i <= this.depth; i++) depth += \">>\";\n      console.info([depth, this.data.category].join(\" \"));\n    }\n    \nArboreal object can be iterated up to the root using method 'bubbleUp':\n\n    tree.children[2].children[0].bubbleUp(iterator)\n    \n    //  => >>>> JavaScript dialect engines\n    //     >> JavaScript programming languages family\n    //     JavaScript\n    \n### Search\n\nIn order to search for a single node into an arboreal object, one can use the `find`\nmethod.\n\n    tree.find(function (node) {\n      return (/calendar/).test(node.data.category)\n    }).data.category;\n\n    // =>  JavaScript based calendar components\n\nThe find method will also accept a string as an argument. In that case,\nit will try to find a node by id.\n\n    tree.find(\"0/2/0\").data.category\n\n    // => JavaScript dialect engines\n\n### Manipulation\n\nWhile traversing a tree, nodes can be deleted by calling the `remove`\nmethod on the node object bound to the iterator function.\n\n    tree.length;\n\n    // => 7\n\n    tree.traverseDown(function (item) {\n      var toDelete = 'JavaScript programming languages family';\n      if (item.data.category === toDelete) {\n        this.remove();\n      }\n    });\n\n    tree.length;\n\n    // 5\n\n## Testing\n\nArboreal test suite uses [Jasmine](http://pivotal.github.com/jasmine/).\nTo run it in node.js..\n\n    cd /home/me/code/arboreal && npm test\n\nTo run it in the browser, just open the `test/index.html`\n\n## Minfication\n\nA minified version of Arboreal can be generated by running\n\n    node make.js\n",
  "readmeFilename": "README.md",
  "_id": "arboreal@0.0.2",
  "dist": {
    "shasum": "abe975c04bc5ca3363b5a6a2001b8e13b87565f7"
  },
  "_from": "arboreal@",
  "_resolved": "https://registry.npmjs.org/arboreal/-/arboreal-0.0.2.tgz"
}
