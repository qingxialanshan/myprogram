{
  "name": "promised-mongo",
  "description": "Easy to use module that implements the mongo api and supports promises",
  "keywords": [
    "mongo",
    "db",
    "mongodb",
    "promise",
    "q"
  ],
  "version": "0.11.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/gordonmleigh/promised-mongo.git"
  },
  "author": {
    "name": "Gordon Mackenzie-Leigh",
    "email": "gordon@stugo.co.uk"
  },
  "contributors": [
    {
      "name": "Gordon Mackenzie-Leigh",
      "email": "gordon@stugo.co.uk"
    },
    {
      "name": "Mathias Buus Madsen",
      "email": "mathiasbuus@gmail.com"
    },
    {
      "name": "Ian Jorgensen"
    },
    {
      "name": "Eduardo Sorribas"
    },
    {
      "name": "Taeho Kim"
    },
    {
      "name": "Forbes Lindesay"
    },
    {
      "name": "Robert S."
    },
    {
      "name": "Srirangan"
    },
    {
      "name": "Erkan Yilmaz"
    },
    {
      "name": "Jake Maskiewicz"
    },
    {
      "name": "Bjarke Walling"
    },
    {
      "name": "Tobias Baunb√¶k"
    },
    {
      "name": "Benedikt Arnold"
    },
    {
      "name": "Kevin McTigue"
    }
  ],
  "dependencies": {
    "readable-stream": "~1.1.8",
    "mongodb": "1.4.0",
    "q": "~0.9.7"
  },
  "scripts": {
    "test": "node ./tests"
  },
  "readme": "<a href=\"http://promises-aplus.github.com/promises-spec\">\n    <img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\"\n         align=\"right\" alt=\"Promises/A+ logo\" />\n</a>\n\n# promised-mongo\n\nA slight rewrite of [mongojs](https://github.com/mafintosh/mongojs) to support promises.  To aid with\nmigration, this API is fully backwardly-compatible with mongojs, but all functions that accept callbacks now return promises too.\nPromises are [Promises/A+](http://promises-aplus.github.io/promises-spec/) compatible, so you are free\nto use [any compatible promise library](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md).\nThe promise library used by this project is [Q](https://github.com/kriskowal/q).\n\n\n## Install\n\npromised-mongo is available through [npm](http://npmjs.org):\n\n\tnpm install promised-mongo\n\n## Usage\n\nUse promised-mongo just like mongojs, except you can also use the returned promise instead of the\ncallback.  Note that a promise isn't returned if a callback is specified.\n\n```js\nvar pmongo = require('promised-mongo');\nvar db = pmongo(connectionString, [collections]);\n```\n\nThe connection string should follow the format desribed in [the mongo connection string docs](http://docs.mongodb.org/manual/reference/connection-string/).\nSome examples of this could be:\n\n``` js\n// simple usage for a local db\nvar db = pmongo('mydb', ['mycollection']);\n\n// the db is on a remote server (the port default to mongo)\nvar db = pmongo('example.com/mydb', ['mycollection']);\n\n// we can also provide some credentials\nvar db = pmongo('username:password@example.com/mydb', ['mycollection']);\n\n// connect now, and worry about collections later\nvar db = pmongo('mydb');\nvar mycollection = db.collection('mycollection');\n```\n\nAfter we connected we can query or update the database just how we would using the mongo API with the exception that the functions return\na promise for the result rather than the result itself.  Cursor operations such as `find()` and `sort()` return a **cursor**; to get a\npromise for the result, you have to force evaluation using `toArray()`.  The function `findOne()` returns a promise immediately, not a cursor.\nNote that due to [limitations in the Q promise library](https://github.com/kriskowal/q/#the-end), you should call `.done()` at the end of\nany promise chain you aren't returning, in order to throw any uncaught exceptions.  For brevity, the examples in this readme don't do that.\n\n``` js\n// find everything\ndb.mycollection.find().toArray().then(function(docs){\n\t// docs is an array of all the documents in mycollection\n});\n\n// find everything, but sort by name\ndb.mycollection.find().sort({name:1}).toArray().then(function(docs) {\n\t// docs is now a sorted array\n});\n\n// iterate over all whose level is greater than 90.\ndb.mycollection.find({level:{$gt:90}}).forEach(function(err, doc) {\n\tif (!doc) {\n\t\t// we visited all docs in the collection\n\t\treturn;\n\t}\n\t// doc is a document in the collection\n});\n\n// find a document using a native ObjectId\ndb.mycollection.findOne({\n\t_id: pmongo.ObjectId('523209c4561c640000000001')\n}).then(function(doc) {\n\t// doc._id.toString() === '523209c4561c640000000001'\n});\n\n// find all named 'mathias' and increment their level\ndb.mycollection.update({name:'mathias'}, {$inc:{level:1}}, {multi:true})\n\t.then(function(lastErrorObject) {\n\t\t// the update is complete\n\t});\n\n// find one named 'mathias', tag him as a contributor and return the modified doc\ndb.mycollection.findAndModify({\n\tquery: { name: 'mathias' },\n\tupdate: { $set: { tag:'maintainer' } },\n\tnew: true\n})\n.then(function(doc) {\n\t// doc.tag === 'maintainer'\n});\n\n// use the save function to just save a document\ndb.mycollection.save({created:'just now'});\n\n```\n\nTo access `lastErrorObject` returned by `findAndModify` using the promises API, use the `findAndModifyEx` function:\n\n```\ndb.mycollection.findAndModifyEx({\n\tquery: { name: 'mathias' },\n\tupdate: { $set: { tag:'maintainer' } },\n\tnew: true\n})\n.then(function(result) {\n\tvar doc = result.result;\n\tvar lastErrorObject = result.lastErrorObject;\n});\n```\n\nIf you provide a callback to `find` or any cursor config operation mongojs will call `toArray` for you\n\n``` js\ndb.mycollection.find({}, function(err, docs) { ... });\n\ndb.mycollection.find({}).limit(2).skip(1, function(err, docs) { ... });\n```\nis the same as\n\n``` js\ndb.mycollection.find({}).toArray(function(err, docs) { ... });\n\ndb.mycollection.find({}).limit(2).skip(1).toArray(function(err, docs) { ... });\n```\n\nIf you are using the promises API, **you must call toArray() on cursors** before a promise can be obtained.  E.g.:\n\n```\ndb.mycollection.find().limit(2).skip(1).toArray()\n\t.then(function (docs) {\n\t\t// ...\n\t});\n```\n\nFor more detailed information about the different usages of update and querying see [the mongo docs](http://www.mongodb.org/display/DOCS/Manual)\n\n## Streaming cursors\n\nAs of `0.7.0` all cursors are a [readable stream](http://nodejs.org/api/stream.html#stream_readable_stream) of objects.\n\n``` js\nvar JSONStream = require('JSONStream');\n\n// pipe all documents in mycollection to stdout\ndb.mycollection.find({}).pipe(JSONStream.stringify()).pipe(process.stdout);\n```\n\nNotice that you should pipe the cursor through a stringifier (like [JSONStream](https://github.com/dominictarr/JSONStream))\nif you want to pipe it to a serial stream like a http response.\n\n## Tailable cursors\n\nIf you are using a capped collection you can create a [tailable cursor](http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/) to that collection by adding `tailable:true` to the find options\n\n``` js\nvar cursor = db.mycollection.find({}, {}, {tailable:true, timeout:false});\n\n// since all cursors are streams we can just listen for data\ncursor.on('data', function(doc) {\n\tconsole.log('new document', doc);\n});\n```\n\nNote that you need to explicitly set the selection parameter in the `find` call.\n\n## Database commands\n\nWith promised-mongo you can run database commands just like with the mongo shell using `db.runCommand()`\n\n```js\ndb.runCommand({ping:1}).then(function(res) {\n\tif(!err && res.ok) console.log(\"we're up\");\n});\n```\n\nor `db.collection.runCommand()`\n\n```js\ndb.things.runCommand('count').then(function(res) {\n\tconsole.log(res);\n});\n```\n\n## Replication Sets\n\nPromised-mongo can also connect to a mongo replication set by providing a connection string with multiple hosts\n\n``` js\nvar db = pmongo('rs-1.com,rs-2.com,rs-3.com/mydb?slaveOk=true', ['mycollection']);\n```\n\nFor more detailed information about replica sets see [the mongo replication docs](http://www.mongodb.org/display/DOCS/Replica+Sets)\n\n# API\n\nThis API documentation is a work in progress.  To maintain compatibility with mongojs,\nall functions can accept a callback.  If no callback is specified, a promise is returned.\n\n#### Collection\n\n#####`db.collection.aggregate([pipeline], callback)`\n\n#####`db.collection.count([query], callback)`\n\n#####`db.collection.createIndex(keys, options, [callback])`\n\n#####`db.collection.distinct(field, query, callback)`\n\n#####`db.collection.drop([callback])`\n\n#####`db.collection.dropIndex(index, [callback])`\n\n#####`db.collection.dropIndexes([callback])`\n\n#####`db.collection.ensureIndex(keys, options, [callback])`\n\n#####`db.collection.find([criteria], [projection], [callback])`\n\nThis function applies a query to a collection. You can get the return value, which is a cursor, or pass a callback\nas the last parameter. Said callback receives `(err, documents)`\n\n#####`db.collection.findOne([criteria], [projection], callback)`\n\nApply a query and get one single document passed as a callback. The callback receives `(err, document)`\n\n#####`db.collection.findAndModify(document, callback)`\n\n#####`db.collection.getIndexes(callback)`\n\n#####`db.collection.group(document, callback)`\n\n#####`db.collection.insert(docOrDocs, callback)`\n\n#####`db.collection.isCapped(callback)`\n\n#####`db.collection.mapReduce(map, reduce, options, callback)`\n\n#####`db.collection.reIndex(callback)`\n\n#####`db.collection.remove(query, [justOne], [callback])`\n\n#####`db.collection.runCommand(command, callback)`\n\n#####`db.collection.save(doc, callback)`\n\n#####`db.collection.stats(callback)`\n\n#####`db.collection.update(query, update, [options], callback)`\n\n#### Cursor\n\n#####`cursor.batchSize(size, [callback])`\n\n#####`cursor.count(callback)`\n\n#####`cursor.explain(callback)`\n\n#####`cursor.forEach(function)`\n\n#####`cursor.limit(n, [callback])`\n\n#####`cursor.map(function, [callback])`\n\n#####`cursor.next(callback)`\n\n#####`cursor.skip(n, [callback])`\n\n#####`cursor.sort(sortOptions, [callback])`\n\n#####`cursor.toArray(callback)`\n\n#### Database\n\n#####`db.addUser(document)`\n\n#####`db.createCollection(name, options, [callback])`\n\n#####`db.dropDatabase([callback])`\n\n#####`db.eval(function, arguments)`\n\n#####`db.getCollectionNames([callback])`\n\n#####`db.getLastError([callback])`\n\n#####`db.getLastErrorObj([callback])`\n\n#####`db.removeUser(username, [callback])`\n\n#####`db.runCommand(command, [callback])`\n\n#####`db.stats([callback])`",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gordonmleigh/promised-mongo/issues"
  },
  "homepage": "https://github.com/gordonmleigh/promised-mongo",
  "_id": "promised-mongo@0.11.1",
  "dist": {
    "shasum": "55e7e409e85c0c24ca6bd4a59011f73a3a0550c8"
  },
  "_from": "promised-mongo@^0.11.1",
  "_resolved": "https://registry.npmjs.org/promised-mongo/-/promised-mongo-0.11.1.tgz"
}
