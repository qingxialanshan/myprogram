{
  "name": "hasharray",
  "author": {
    "name": "Joshua Jung",
    "email": "joshua.p.jung@gmail.com"
  },
  "license": "MIT",
  "description": "A data structure that combines a hash and an array for CRUD operations by object keys or index.",
  "version": "0.1.9",
  "main": "index.js",
  "url": "https://github.com/joshjung/hash-array",
  "homepage": "https://github.com/joshjung/hash-array",
  "email": "joshua.p.jung@gmail.com",
  "dependencies": {
    "debug": "^1.0.4",
    "jclass": "^0.2.5"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/joshjung/hash-array.git"
  },
  "keywords": [
    "hash",
    "hashtable",
    "array",
    "arraylist",
    "dictionary"
  ],
  "readme": "hash-array\n==========\n\nA data structure that combines a hash and an array for add, remove and get operations by object keys or index.\n\nMulti-level key paths can be used (e.g. `'name'` as well as `['child', 'label']` etc.).\n\nInstall\n=======\n\n    npm install hasharray\n\nTesting\n=======\n\n    >mocha\n\n    START\n\n      ․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․\n\n      38 passing (24ms)\n\nExample\n=======\n\n**Basic Usage**\n\n    var HashArray = require ('hasharray');\n\n    // Create new hasharray with two key mappings.\n    var ha = new HashArray(['name', 'zip']);\n    \n    // Add 2 objects to the hash.\n    var item1 = {name: 'Josh', zip: '54321'};\n    var item2 = {name: 'Josh', zip: '12345'};\n    ha.add(item1, item2);\n\n    if (ha.has('Josh'))\n      console.log(ha.get('Josh')); // Will output two objects to the console\n\n    // Display the number of unique objects. In this case, 2.\n    console.log(ha.all.length);\n\n    // Remove an element by one of the keys\n    ha.removeByKey('54321'); // This removes item1\n\n    // Remove item2 directly\n    ha.remove(item2);\n\n** Retreiving Multiples of a Single Key (getAsArray) **\n\n    var ha = new HashArray(['firstName', 'lastName']);\n\n    var person1 = {firstName: 'Bill', lastName: 'William'},\n      person2 = {firstName: 'Bob', lastName: 'William'};\n\n    ha.add(person1, person2);\n\n    console.log(ha.getAsArray('William')); // [person1, person2]\n\n** Retrieving Sets by Multiple Keys (getAll) **\n\n    var ha = new HashArray(['firstName', 'lastName']);\n\n    var person1 = {firstName: 'Victor',  lastName: 'Victor'},\n      person2 =   {firstName: 'Victor',  lastName: 'Manning'},\n      person3 =   {firstName: 'Manning', lastName: 'Victor'};\n      person4 =   {firstName: 'John',    lastName: 'Smith'};\n\n    ha.add(person1, person2, person3, person4);\n\n    console.log(ha.getAll(['Victor', 'Smith'])); // [person1, person2, person3, person4]\n    console.log(ha.getAll(['John', 'Smith'])); // [person4]\n\n**Multi-level Keys**\n\n    var HashArray = require ('hasharray');\n    var ha = new HashArray([\n          ['name', 'last'], // Internally maps obj.name.last -> obj\n          ['name', 'first'], // Internally maps obj.name.first -> obj\n          'zip'\n        ]);\n    \n    ha.add({\n        name: {\n          first: 'Josh',\n          last: 'Jung'\n        },\n        zip: 60616\n      });\n\n    console.log(ha.get(60616) === ha.get('Josh') == ha.get('Jung')); // true\n\n**Key Duplicates**\n\nIf two items contain the same key, they are appended to an array at that key location.\n\n    var HashArray = require ('hasharray');\n    var ha = new HashArray([\n          ['name', 'last'],\n          ['name', 'first']\n        ]);\n    \n    ha.add({\n        name: {\n          first: 'Josh',\n          last: 'Jung'\n        }\n      },\n      {\n        name: {\n          first: 'Josh',\n          last: 'Mills'\n        }\n      },\n      {\n        name: {\n          first: 'Josh',\n          last: 'Willis'\n        }\n      });\n\n    console.log(ha.get('Josh').length); // Will be 3\n    console.log(ha.get('Willis')); // Will be {name: {first: 'Josh', last: 'Willis'} }\n\n**Cloning**\n\nCloning makes a new HashArray clone of the original, ensuring that no Array objects are shared.\n\nKeep in mind that cloning does deep clone objects in the collection. Therefore if you clone an object with three Object items, the clonee will be a new HashArray but will contain references to the original objects.\n\n    var HashArray = require ('hasharray');\n    ...\n    var ha = new HashArray(['someKey']);\n    ...\n    var clonee = ha.clone();\n\nLicense\n=======\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Joshua Jung\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/joshjung/hash-array/issues"
  },
  "_id": "hasharray@0.1.9",
  "_from": "hasharray@^0.1.0"
}
