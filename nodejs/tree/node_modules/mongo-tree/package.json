{
  "name": "mongo-tree",
  "author": {
    "name": "Joshua Jung"
  },
  "description": "tree-structure adapter for CRUD operations for arbitrary tree data structures to mongodb.",
  "version": "0.0.4",
  "main": "index.js",
  "files": [
    "index.js"
  ],
  "url": "https://github.com/joshjung/mongo-tree",
  "email": "joshua.p.jung@gmail.com",
  "dependencies": {
    "debug": "^1.0.4",
    "hasharray": "^0.1.0",
    "promised-mongo": "^0.11.1",
    "q": "1.0.1",
    "q-foreach": "^0.0.2",
    "tree-structure": "^0.0.7"
  },
  "devDependencies": {
    "promised-mongo": "^0.11.1"
  },
  "keywords": [
    "mongo",
    "mongodb",
    "tree",
    "tree-structure",
    "collection",
    "nodes"
  ],
  "readme": "mongo-tree\n==========\n\nThis module provides CRUD operation methods for inserting, updating, and removing of entire tree structures to a MongoDB collection.\n\nThe module uses the [promised-mongo](https://www.npmjs.org/package/promised-mongo) module.\n\nRequirements\n============\n\n- `tree-structure`: [link](https://www.npmjs.org/package/tree-structure)\n- MongoDB connection\n    - 1 collection for the trees\n    - 1 collection for the nodes\n\nTesting\n=======\n\n    mocha\n\nExamples\n========\n\n**Connecting/Setup**\n\nConnecting is simple:\n\n    var mongoTree = require('mongo-tree');\n    mongoTree.connect('mongodb://127.0.0.1:27017/test');\n\nmongo-tree requires two collections, which can be set up like this:\n\n    var mongoTree = require('mongo-tree');\n    mongoTree.connect('mongodb://127.0.0.1:27017/test', {\n      nodeCollection: 'myNodesCollectionName',\n      treeCollection: 'myTreesCollectionName',\n    });\n\n**Inserting**\n\n    var Tree = require('tree-structure').Tree;\n    var MongoTree = require('mongo-tree');\n    var mongoTree = new MongoTree();\n\n    // Create a new tree object.\n    var tree = new Tree();\n\n    // Convert a JSON tree (with children nodes) into a tree structure in memory. See documentation on tree-structure.\n    tree.unflatten(\n      {\n        id: 'my test tree!',\n        options: {\n          childrenField: 'children'\n        },\n        root: {\n          id: 1,\n          data: 'this is the root data'\n          children: [{\n            id: 2,\n            data: 'this is the child nodes (2) data'\n          }, {\n            id: 3,\n            data: 'this is the child nodes (3) data'\n          }, {\n            id: 4,\n            data: 'this is the child nodes (4) data'\n          }]\n        }\n      }\n    );\n\n    mongoTree.connect('mongodb://127.0.0.1:27017/test');\n\n    mongoTree.insert(tree); // Will create 1 tree document and 4 node documents.\n\nMultiple inserts can be performed at a time, like this:\n\n    var tree1 = new Tree(),\n      tree2 = new Tree(),\n      tree3 = new Tree();\n    ...\n    mongoTree.insert(tree1, tree2, tree3).then(function () {\n        console.log('success!');\n      });\n\n**Retrieving**\n\nTrees are retrieved by the tree id:\n\n    var Tree = require('tree-structure').Tree;\n    var MongoTree = require('mongo-tree');\n    var mongoTree = new MongoTree();\n\n    mongoTree.connect('mongodb://127.0.0.1:27017/test');\n\n    var treeId = 'some tree id to find';\n\n    mongoTree.find(treeId).then(function (tree) {\n        console.log('The recoupled tree is: ', tree);\n      });\n\n**Removing**\n\nTrees are removed from the database by their tree id:\n\n    var Tree = require('tree-structure').Tree;\n    var MongoTree = require('mongo-tree');\n    var mongoTree = new MongoTree();\n\n    mongoTree.connect('mongodb://127.0.0.1:27017/test');\n    \n    var treeId = 'some tree id to delete';\n\n    mongoTree.remove(treeId).then(function () {\n        console.log('Deleted.');\n      });\n\n**Removing Orphaned Nodes**\n\nTODO: right now removing a tree simply removes the structure, but not the nodes as each code can technically be referenced\nby multiple parent trees. As a result, a method will need to be built to ensure removal of orphaned nodes.\n\nLicense\n=======\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Joshua Jung\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n",
  "readmeFilename": "README.md",
  "_id": "mongo-tree@0.0.4",
  "dist": {
    "shasum": "e02966489abb462bae6e4bd15e2b0d80a4b7daba"
  },
  "_from": "mongo-tree@",
  "_resolved": "https://registry.npmjs.org/mongo-tree/-/mongo-tree-0.0.4.tgz"
}
