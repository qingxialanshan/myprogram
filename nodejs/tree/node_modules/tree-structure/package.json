{
  "name": "tree-structure",
  "author": {
    "name": "Joshua Jung"
  },
  "description": "Yet another tree implementation in Javascript, specifically for Node.js.",
  "version": "0.0.7",
  "main": "index.js",
  "url": "https://github.com/joshjung/tree-structure",
  "email": "joshua.p.jung@gmail.com",
  "dependencies": {
    "debug": "^1.0.4",
    "hasharray": "^0.1.2",
    "node-uuid": "^1.4.1"
  },
  "readme": "tree-structure\n==============\n\nA basic tree data structure with objects for Tree and Node for Node.js.\n\nInstall\n=======\n\n    npm install tree-structure\n\nGoals\n=====\n\nIn Computer Science, a tree is a data structure constructed of nodes that contains no cycles and has a single node at its root from which all node paths extend.\n\nThe standard automaton that Turing discovered was based on the idea of a sequence of characters. As one can imagine, storing a tree on a tape with a start and an end is not ideal and therefore saving a tree to a database can be troublesome especially if one would like to reuse nodes across multiple trees.\n\nMy goal with this module and the accompanying [tree-structure-mongodb](https://github.com/joshjung/tree-structure-mongodb) module is to provide a way to create, manipulate, and store trees in a database in the most efficient possible way and to allow reuse of nodes across multiple trees (optionally).\n\nExamples\n========\n\nConstruct a basic tree from a Javascript object.\n\n    var treeStructure = require('tree-structure'),\n      Tree = treeStructure.Tree;\n      TreeNode = treeStructure.TreeNode;\n\n    var tree = new Tree('tree name', {\n        childrenField: 'children'\n      });\n\n    var flat = {\n      id: 1,\n      data: {\n        text: 'hello there'\n      },\n      children: [\n        {\n          id: 2,\n          data: {\n            text: 'whats up'\n          }\n        },\n        {\n          id: 3,\n          data: {\n            text: 'this is a sweeet library for sure'\n          }\n        }\n      ]\n    };\n\n    tree.unflatten(flat);\n\n    var root = tree.root; // Return the root node.\n    console.log(root == tree.get(1)); // 'true'\n\nDecouple all the nodes from eachother so that each object simple has a `childIds` property. This prepares the data for saving to a database:\n\n    var treeStructure = require('tree-structure'),\n      Tree = treeStructure.Tree;\n      TreeNode = treeStructure.TreeNode;\n\n    var tree = new Tree('tree name');\n\n    var flat = {\n      id: 'some tree',\n      options: {\n        idGenerator: undefined\n      },\n      root: {\n        id: 100,\n        data: {\n          text: \"Some data string 100.\"\n        },\n        children: [{\n          id: 1,\n          data: {\n            text: \"Some data string 1.\"\n          }\n        }, {\n          id: 2,\n          data: {\n            text: \"Some data string 2.\"\n          }\n        }, {\n          id: 3,\n          data: {\n            text: \"Some data string 3.\"\n          }\n        }]\n      }\n    }\n\n    tree.unflatten(flat);\n\n    console.log(tree.decouple()); // Output below\n\nThe output of the decoupled tree is JSON that looks like the following:\n\n    { tree: \n       { id: 'some tree',\n         rootId: 100,\n         nodeIds: [ 1, 2, 3, 100 ],\n         options: { childrenField: 'children', nodeKeyFields: [Object] } },\n      nodes: \n       [ { id: 1, data: {...} },\n         { id: 2, data: {...} },\n         { id: 3, data: {...} },\n         { id: 100, data: {...}, childIds: [ 1, 2, 3 ] } ] }\n\nThe `tree` Object in the above JSON has a reference to all of the ids of its child nodes without actually having a direct reference to them.\n\nEach node in the `nodes` array in the JSON above has a reference to all of its child ids, but without having a direct reference to them.\n\nAs a result, one can - in two MongoDG queries - save the `tree` object and then the `nodes` object. This ensures that each node is its own document and that each tree is its own document in a separate collection.\n\n**This is why I chose to call the function `decouple`.** Decoupling all the nodes in the tree from eachother - other than just an `id` reference - makes it easy to ave and retrieve the entire tree from the database in two queries.\n\nUNDER CONSTRUCTION\n==================\n\nThis project is still being developed as of August 11, 2014. Please let me know of any bugs on my github page and I will hopefully get to them within a day.\n\nLicense\n=======\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Joshua Jung\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "tree-structure@0.0.7",
  "dist": {
    "shasum": "5df45609dc2129ade547e8f5a4c9c70241222323"
  },
  "_from": "tree-structure@",
  "_resolved": "https://registry.npmjs.org/tree-structure/-/tree-structure-0.0.7.tgz"
}
