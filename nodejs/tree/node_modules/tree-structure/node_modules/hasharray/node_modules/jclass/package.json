{
  "name": "jclass",
  "preferGlobal": false,
  "version": "0.2.5",
  "author": {
    "name": "Marcel Rieger",
    "email": "marcelrieger@me.com"
  },
  "description": "Advanced JavaScript inheritance model providing genuine private members based on John Resig's Inheritance Class.",
  "main": "./lib/jclass.min",
  "repository": {
    "type": "git",
    "url": "https://github.com/riga/jclass.git"
  },
  "keywords": [
    "john",
    "resig",
    "javascript",
    "inheritance",
    "class",
    "private",
    "members"
  ],
  "dependencies": {},
  "license": "MIT/GPLv2",
  "engines": {
    "node": ">=0.6"
  },
  "readme": "# **JClass**\n\n*Advanced JavaScript inheritance model providing __genuine private members__ based on [John Resig's Inheritance Class](http://ejohn.org/blog/simple-javascript-inheritance/)*\n\nhttps://npmjs.org/package/jclass\n\n\n## Synopsis\n\nJClass is a lightweight and flexible JavaScript inheritance model providing **genuine private\nmembers** using closures. It's applicable in nodejs and normal web browsers. JClass is\nimplemented using `prototype`'s and brings along multiple features like e.g. propper (and even\ninheritance consistent)`instanceof` calls. To come straight to the point:\n\n```javascript\nvar Animal = JClass.extend({\n\n    // the constructor method\n    init: function(name) {\n        // a public value\n        this.name = name;\n    },\n\n    // a public method\n    eat: function() {\n        return this.name + ' eats';\n    },\n\n    // a private method, indicated by 2 leading underscores\n    __behave: function() {\n        return this.name + ' behaves';\n    }\n});\n\n// inherit from 'Animal'\nvar Cat = Animal.extend({\n\n    init: function(name, color) {\n        // call 'init' of the super-class\n        this._super(name);\n        this.color = color;\n\n        // a private value, indicated by 2 leading underscores\n        this.__lives = 9;\n    },\n\n    // overwrite 'eat'\n    eat: function() {\n        var msg = this.__behave();\n        // 'this._super' references Animal's 'eat' method\n        return msg + ' because ' + this._super() + ' fish';\n    },\n\n    // getter for '__lives'\n    getLives: function() {\n        return this.__lives;\n    }\n});\n\nvar simon = new Cat('simon', 'white');\nconsole.log(simon instanceof Cat);    // true\nconsole.log(simon instanceof JClass); // true\n\nconsole.log(simon.name);       // 'simon'\nconsole.log(simon.__behave()); // TypeError: Object has no method '__behave'\nconsole.log(simon.eat());      // 'simon behaves because simon eats fish'\nconsole.log(simon.__lives);    // undefined\nconsole.log(simon.getLives()); // 9\n```\nThis little example shows only the basics. It's even possible to customize and optimize JClass for\nthe various needs of your code by using [`options`](https://github.com/riga/jclass#options) (e.g.\nyou can change the naming scheme of private members). Take a look at the [examples](https://github.com/riga/jclass#examples)\nto get a picture of what is possible and how it's working.\n\n\n## Installation\n\nFor node (using npm):\n\n```console\nnpm install jclass\n```\n\nFor web browsers:\n\n```html\n<script src=\"/path/to/jclass.min.js\"></script>\n```\n\n\n## Examples\n\n### Calling `_super` methods\n\n```javascript\nvar Vehicle = JClass.extend({\n    init: function(type) {\n        this.type = type;\n    },\n\n    drive: function() {\n        return 'driving';\n    }\n});\n\nvar Car = Vehicle.extend({\n    init: function(color) {\n        // call the super 'init'\n        this._super('car');\n        this.color = color;\n    },\n\n    drive: function() {\n        // call the super 'drive'\n        return this._super() + ' on 4 tires';\n    }\n});\n\nvar myCar = new Car('red');\n\nconsole.log(myCar.drive()); // 'driving on 4 tires'\n```\n\n### Private members and the private object\n\n```javascript\nvar Vehicle = JClass.extend({\n    init: function(type, price) {\n        this.type = type;\n\n        // a private value, indicated by 2 leading underscores\n        // because 'privatePattern' is /__.*/ by default\n        this.__price = price\n\n        // a private value using the 'private object'\n        this.__.consumption = 'too much';\n    },\n\n    // a private method\n    __drive: function() {\n        return 'driving';\n    }\n});\n\nvar Car = Vehicle.extend({\n    init: function(color, price) {\n        this._super('car', price);\n        this.color = color;\n    },\n\n    // a getter for 'this.__price'\n    getPrice: function() {\n        return this.__price;\n    },\n\n    forceDrive: function() {\n        return this.__drive();\n    }\n});\n\nvar myCar = new Car('red', 10000);\n\nconsole.log(myCar.__price);        // undefined\nconsole.log(myCar.getPrice());     // 10000\nconsole.log(myCar.__.consumption); // undefined\nconsole.log(myCar.__drive());      // TypeError: Object has no method '__drive'\nconsole.log(myCar.forceDrive());   // 'driving'\n```\n\n### Disable `tracking`\n\n```javascript\nvar opts = {\n    tracking: false\n};\n\nvar Vehicle = JClass.extend({\n    init: function(type, price) {\n        this.type = type;\n\n        // won't be private since there is no tracking\n        this.__price = price\n        \n        // values of the 'private object' stay private though!\n        this.__.consumption = 'too much';\n    },\n\n    // still a private method since tracking does not affect methods\n    // (methods are kown before the first method call)\n    __drive: function() {\n        return 'driving';\n    }\n}, opts); // note the second parameter\n\nvar Car = Vehicle.extend({\n    init: function(color, price) {\n        this._super('car', price);\n        this.color = color;\n    },\n\n    forceDrive: function() {\n        return this.__drive();\n    }\n});\n\nvar myCar = new Car('red', 10000);\n\nconsole.log(myCar.__price);      // 10000\nconsole.log(myCar.__drive());    // TypeError: Object has no method '__drive'\nconsole.log(myCar.forceDrive()); // 'driving'\n```\n\n### Final classes using `extendable`\n\n```javascript\nvar opts = {\n    extendable: false\n};\n\nvar Vehicle = JClass.extend({\n    init: function(type) {\n        this.type = type;\n\n        // a private value\n        this.__secret = 'yay!';\n    }\n\n}, opts); // note the second parameter\n\nvar CarHack = Vehicle.extend({\n    init: function() {\n        this._super('car');\n    },\n\n    // try to get the '__secret'\n    getSecret: function() {\n        return this.__secret;\n    }\n});\n\n// 'CarHack' won't be assigned since 'Vehicle' cannot be subclassed anymore\n```\n\n### Changing keys\n\n```javascript\nvar opts = {\n    ctorName      : 'ctor',         // the constructor name\n    superName     : '_parent',      // the super method name\n    privatePattern: '/^__.+__$/',   // the naming scheme\n    privateName   : '_private'      // the name of the private object\n};\n\nvar Vehicle = JClass.extend({\n    ctor: function(type) {\n        this.type = type;\n\n        // a private value\n        this.__secret__ = 'yay!';\n\n        // a private value using the 'private object'\n        this._private.foo = 'bar';\n    },\n\n    // a private method\n    __drive__: function() {\n        return 'driving';\n    }\n});\n\nvar Car = Vehicle.extend({\n    ctor: function(color) {\n        // call the super 'init'\n        this._parent('car');\n        this.color = color;\n    },\n\n    tellSecrets: function() {\n        return this.__drive__() + ' ' + this.__secret__;\n    }\n});\n\nvar myCar = newCar('red');\n\nconsole.log(myCar.tellSecrets()); // 'driving yay!'\n\n```\n\n## Configuration\n\n### Options\nThe signature of `extend` is\n\n```javascript\nvar SubClass = JClass.extend(properties [, options]);\n```\n* [`properties`](https://github.com/riga/jclass/blob/master/lib/jclass.js#L101)\n\\- (Object, *mandatory*)\n\\- An object that defines the methods of your class. See [John Resig's Simple Inheritance](http://ejohn.org/blog/simple-javascript-inheritance/) technique for more details.\n\n* [`options`](https://github.com/riga/jclass/blob/master/lib/jclass.js#L101)\n\\- (Object, *optional*)\n\\- An object containing\n    * [`extendable`](https://github.com/riga/jclass/blob/master/lib/jclass.js#L345)\n    \\- (Boolean, *default:* **true**)\n    \\- When true, another subclass can inherit from this class. When false, this class cannot be\n    subclassed (e.g. like [`final` classes in Java](http://en.wikipedia.org/wiki/Final_(Java))).\n\n    * [`ctorName`](https://github.com/riga/jclass/blob/master/lib/jclass.js#L335)\n    \\- (String, *default:* **'init'**)\n    \\- The name of the method that is invoked when a new instance of your class is created via\n    `new MyClass()`. All passed arguments are applied to this method (OO speaking: the constructor's\n    name).\n\n    * [`superName`](https://github.com/riga/jclass/blob/master/lib/jclass.js#L149)\n    \\- (String, *default:* **'\\_super'**)\n    \\- The name of the methods of the super-class.\n    When you call (e.g.) `this._super()` in your `init` method, the `init` method of the super-class\n    is called.\n\n    * [`enablePrivacy`](https://github.com/riga/jclass/blob/master/lib/jclass.js#L109)\n    \\- (String, *default:* **true**)\n    \\- When false, this is equivalent to `privatePattern = null` plus `privateName = null` (see\n    below).\n\n    * [`privatePattern`](https://github.com/riga/jclass/blob/master/lib/jclass.js#L307)\n    \\- (RegExp, *default:* **/^\\_\\_.+/**)\n    \\- A [regular expression](http://en.wikipedia.org/wiki/Regular_expression) that defines how your\n    private members look like. `/^__.+/` would find `__fooFn` but not `_barFn`. Null means that\n    there will be no private members.\n\n    * [`privateName`](https://github.com/riga/jclass/blob/master/lib/jclass.js#L155)\n    \\- (String, *default:* **'\\_\\_'**)\n    \\- In addition to values/methods that match the `privatePattern`, another private object named\n    `privateName` is visible in every method's scope. In some cases, you may use this object instead\n    of using `tracking` (see below). Null means that no additional private object will be used.\n\n    * [`tracking`](https://github.com/riga/jclass/blob/master/lib/jclass.js#L212)\n    \\- (Boolean, *default:* **true**)\n    \\- `tracking` means that all members of an instance are compared before and after a method call\n    in order to track down any addition or deletion of private values (not methods!). When you call\n    (e.g.) 'this.\\_\\_foo = 123' inside a method, the key `__foo` (that also matches the\n    `privatePattern`) was obviously added and will be detected by the *before/after* comparison. If\n    your classes have a lot of members, you should use the additional private object defined by\n    `privateName` to reduce the number of comparisons. *Note*: when false, all non-methods (even if\n    they match the 'privatePattern') won't be private (`this.__foo` in our example).\n\n    * [`methodsKey`](https://github.com/riga/jclass/blob/master/lib/jclass.js#L177)\n    \\- (String, *default:* **'\\_jcMethods\\_'**)\n    \\- The name of the object that holds all private methods during a method call. *Note*: you only\n    need to change this value in case of a name collision with your code.\n\n    * [`depthKey`](https://github.com/riga/jclass/blob/master/lib/jclass.js#L124)\n    \\- (String, *default:* **'\\_jcDepth\\_'**)\n    \\- The name of the depth value (0 for JClass, 1 for the first derived class, 2 for the second\n    ...). *Note*: you only need to change this value in case of a name collision with your code.\n\n    * [`callerDepthKey`](https://github.com/riga/jclass/blob/master/lib/jclass.js#L161)\n    \\- (String, *default:* **'\\_jcCallerDepth\\_'**)\n    \\- The name of the depth value of the initial caller. *Note*: you only need to change this value\n    in case of a name collision with your code.\n\n**Please note:** when extending an existing class, please use identical values for the options\n`ctorName`, `superName`, `privatePattern` and `privateName` in order to keep the prototype/inheritence model\nconsistent!\n\n#### `JClass.noConflict()`\nUse this method when `JClass` interfers with your code. It returns a reference to the `JClass` base\nobject and resets the `JClass` variable to its initial value.\n\n\n## Development\n\n- Source hosted at [GitHub](https://github.com/riga/jclass)\n- Report issues, questions, feature requests on\n[GitHub Issues](https://github.com/riga/jclass/issues)\n\n\n## Authors\n\nMarcel R. ([riga](https://github.com/riga))\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/riga/jclass/issues"
  },
  "homepage": "https://github.com/riga/jclass",
  "_id": "jclass@0.2.5",
  "dist": {
    "shasum": "96a3faa08af747af9a33174f3a8ab0cadefb927c"
  },
  "_from": "jclass@^0.2.5",
  "_resolved": "https://registry.npmjs.org/jclass/-/jclass-0.2.5.tgz"
}
