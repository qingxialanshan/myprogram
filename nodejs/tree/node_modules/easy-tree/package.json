{
  "name": "easy-tree",
  "author": {
    "name": "James Nylen",
    "email": "jnylen@gmail.com"
  },
  "description": "Simple library to manipulate tree data structures.",
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/nylen/easy-tree"
  },
  "bugs": {
    "url": "https://github.com/nylen/easy-tree/issues"
  },
  "license": "MIT",
  "keywords": [
    "tree"
  ],
  "scripts": {
    "test": "node node_modules/.bin/mocha"
  },
  "main": "index.js",
  "dependencies": {},
  "devDependencies": {
    "mocha": "~2.0.1",
    "must": "~0.12.0"
  },
  "readme": "# easy-tree\n\n[![Build status](https://img.shields.io/travis/nylen/easy-tree.svg?style=flat)](https://travis-ci.org/nylen/easy-tree)\n[![npm package](http://img.shields.io/npm/v/easy-tree.svg?style=flat)](https://www.npmjs.org/package/easy-tree)\n\nThis simple Node.js module provides an easy way to manipulate tree data\nstructures.\n\n## Usage\n\nRequire the module and create a `Tree` object:\n\n```js\nvar Tree = require('easy-tree');\n\n// Create an empty tree\nvar tree = new Tree();\n\n// Create a tree from an arbitrary data object\nvar tree = new Tree({\n    a : 1,\n    b : 2\n});\n\n// Create a tree with several children from an array\nvar tree = new Tree([\n    { a : 1 },\n    { b : 2 }\n]);\n\n// Create a multi-level tree using the `children` property\nvar tree = new Tree({\n    a : 1,\n    b : 2,\n    children : [\n        { c : 3 },\n        { d : 4 }\n    ]\n});\n\n// If you're not a fan of `new`\nvar tree = Tree();\n```\n\nA `Tree` object represents a tree node.  Tree nodes must be JavaScript objects.\nThey can have any data attributes that do not conflict with `Tree` object\nmethod names, and one or more children, which are stored in the `children`\narray.\n\nYou can use `tree.children[i]` and `tree.children.length` to retrieve and count\nchildren, but **do not manipulate the `children` array directly!** Instead, use\nthe following methods to safely and correctly perform operations on the tree:\n\n## Methods\n\nMost methods take a `path` argument which is an array of 0-based indices that\npoint to a tree node.  Omit the `path` argument or use `[]` to perform the\noperation on the current node, but this is not valid for all operations:  a\ntree node cannot remove itself, or insert a node before or after itself,\nbecause it doesn't know its own parent.\n\nMany methods take a `child` argument, which can be either a `Tree` instance or\na plain object which will be converted to a `Tree` instance.\n\n### tree.get([path])\n\nReturns the subtree at `path` (or the tree itself, if `path` is `[]` or\nomitted).\n\n### tree.prepend([path], child)\n\nInsert `child` as the first child of the node given by `path`.\n\nReturns the new number of children of the modified node.\n\n### tree.insertBefore(path, child)\n\nInsert `child` before the node given by `path`.\n\n`path` cannot be omitted and must contain at least 1 element.\n\nReturns the new number of children of the modified node.\n\n### tree.append([path], child)\n\nInsert `child` as the last child of the node given by `path`.\n\nReturns the new number of children of the modified node.\n\n### tree.insertAfter(path, child)\n\nInsert `child` after the node given by `path`.\n\n`path` cannot be omitted and must contain at least 1 element.\n\nReturns the new number of children of the modified node.\n\n### tree.remove(path)\n\nRemoves the node specified by `path`, and **inserts each of its children where\nthe removed node used to be**.\n\n`path` cannot be omitted and must contain at least 1 element.\n\nReturns the removed node (without any children).\n\n### tree.prune(path)\n\nRemoves the entire subtree beginning with the node specified by `path`.\n\n`path` cannot be omitted and must contain at least 1 element.\n\nReturns the removed node and all its children.\n\n### tree.keys([path])\n\nReturns an array of all data attributes in the node specified by `path` (same\nas `Object.keys()` but excludes the `children` property).\n\n### tree.walk([path], [cb])\n\nFor the node specified by `path` and any child and descendant nodes, calls `cb`\n**synchronously** with parameters `path, node`.\n\nReturns the total number of nodes visited.\n\nYou can omit the `cb` parameter to just count the number of nodes in a tree.\n\nIf `cb` returns `false` for a given node, the `walk` function will not descend\nto that node's children and they will not be included in the count of nodes\nvisited.\n\n## Other Notes\n\n`Tree` objects also contain the following private methods, so you cannot use\nany of these names as data attributes:\n\n- `_doAtPath`\n- `_makeTree`\n- `_throwPathError`\n- `_walk`\n\nSaving tree data to JSON and restoring it later works just fine:\n\n```js\nvar myTree = new Tree({ ... });\n\nvar savedData = JSON.stringify(myTree);\n\nmyTree = new Tree(JSON.parse(savedData));\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/nylen/easy-tree",
  "_id": "easy-tree@0.0.3",
  "dist": {
    "shasum": "f783dd682d5af7a7cb94d9e9fbe4ccfeaae9fd4e"
  },
  "_from": "easy-tree@",
  "_resolved": "https://registry.npmjs.org/easy-tree/-/easy-tree-0.0.3.tgz"
}
